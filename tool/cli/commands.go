// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/EncryptAny/AditumAllAPI/design
// --out=$(GOPATH)/src/github.com/EncryptAny/AditumAllAPI
// --version=v1.1.0-dirty
//
// API "aditum-all": CLI Commands
//
// The content of this file is auto-generated, DO NOT MODIFY

package cli

import (
	"encoding/json"
	"fmt"
	"github.com/EncryptAny/AditumAllAPI/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"golang.org/x/net/context"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// CreateApCommand is the command line data structure for the create action of ap
	CreateApCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DownvoteApCommand is the command line data structure for the downvote action of ap
	DownvoteApCommand struct {
		// AP ID
		ApID        int
		PrettyPrint bool
	}

	// UpvoteApCommand is the command line data structure for the upvote action of ap
	UpvoteApCommand struct {
		// AP ID
		ApID        int
		PrettyPrint bool
	}

	// AllVenueCommand is the command line data structure for the all action of venue
	AllVenueCommand struct {
		PrettyPrint bool
	}

	// DownvoteAIVenueCommand is the command line data structure for the downvoteAI action of venue
	DownvoteAIVenueCommand struct {
		// Type of AI
		AiType string
		// Venue ID
		VenueID     int
		PrettyPrint bool
	}

	// NewVenueCommand is the command line data structure for the new action of venue
	NewVenueCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// NewAIVenueCommand is the command line data structure for the newAI action of venue
	NewAIVenueCommand struct {
		// Type of AI to Create
		AiType string
		// Venue ID
		VenueID     int
		PrettyPrint bool
	}

	// ShowVenueCommand is the command line data structure for the show action of venue
	ShowVenueCommand struct {
		// Venue ID
		VenueID     int
		PrettyPrint bool
	}

	// UpvoteAIVenueCommand is the command line data structure for the upvoteAI action of venue
	UpvoteAIVenueCommand struct {
		// Type of AI
		AiType string
		// Venue ID
		VenueID     int
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "all",
		Short: `Get all venues`,
	}
	tmp1 := new(AllVenueCommand)
	sub = &cobra.Command{
		Use:   `venue ["/venue"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "create",
		Short: `Create an AP`,
	}
	tmp2 := new(CreateApCommand)
	sub = &cobra.Command{
		Use:   `ap ["/ap"]`,
		Short: ``,
		Long: `

Payload example:

{
   "lat": 0.39693772760266655,
   "long": 0.9291421772758793,
   "type": "ramp",
   "venueID": 4647637107177751979
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "downvote",
		Short: `Downvote a particular AP`,
	}
	tmp3 := new(DownvoteApCommand)
	sub = &cobra.Command{
		Use:   `ap ["/ap/APID/upvote"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "downvoteAI",
		Short: `Downvote an existing AI for a venue`,
	}
	tmp4 := new(DownvoteAIVenueCommand)
	sub = &cobra.Command{
		Use:   `venue ["/venue/VENUEID/AITYPE/downvote"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "new",
		Short: `Create a new venue`,
	}
	tmp5 := new(NewVenueCommand)
	sub = &cobra.Command{
		Use:   `venue ["/venue"]`,
		Short: ``,
		Long: `

Payload example:

{
   "lat": 0.20280614265257982,
   "long": 0.7040051249995114,
   "name": "Quidem pariatur asperiores impedit vel.",
   "radius": 88.42557402985365
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "newAI",
		Short: `Create a new AI for a venue`,
	}
	tmp6 := new(NewAIVenueCommand)
	sub = &cobra.Command{
		Use:   `venue ["/venue/VENUEID/AITYPE"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `Get venue by ID`,
	}
	tmp7 := new(ShowVenueCommand)
	sub = &cobra.Command{
		Use:   `venue ["/venue/VENUEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "upvote",
		Short: `Upvote a particular AP`,
	}
	tmp8 := new(UpvoteApCommand)
	sub = &cobra.Command{
		Use:   `ap ["/ap/APID/downvote"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "upvoteAI",
		Short: `Upvote an existing AI for a venue`,
	}
	tmp9 := new(UpvoteAIVenueCommand)
	sub = &cobra.Command{
		Use:   `venue ["/venue/VENUEID/AITYPE/upvote"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the CreateApCommand command.
func (cmd *CreateApCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/ap"
	}
	var payload client.NewAP
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateAp(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateApCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DownvoteApCommand command.
func (cmd *DownvoteApCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/ap/%v/upvote", cmd.ApID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DownvoteAp(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DownvoteApCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var apID int
	cc.Flags().IntVar(&cmd.ApID, "apID", apID, `AP ID`)
}

// Run makes the HTTP request corresponding to the UpvoteApCommand command.
func (cmd *UpvoteApCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/ap/%v/downvote", cmd.ApID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpvoteAp(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpvoteApCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var apID int
	cc.Flags().IntVar(&cmd.ApID, "apID", apID, `AP ID`)
}

// Run makes the HTTP request corresponding to the AllVenueCommand command.
func (cmd *AllVenueCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/venue"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AllVenue(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AllVenueCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the DownvoteAIVenueCommand command.
func (cmd *DownvoteAIVenueCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/venue/%v/%v/downvote", cmd.VenueID, url.QueryEscape(cmd.AiType))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DownvoteAIVenue(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DownvoteAIVenueCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var aiType string
	cc.Flags().StringVar(&cmd.AiType, "aiType", aiType, `Type of AI`)
	var venueID int
	cc.Flags().IntVar(&cmd.VenueID, "venueID", venueID, `Venue ID`)
}

// Run makes the HTTP request corresponding to the NewVenueCommand command.
func (cmd *NewVenueCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/venue"
	}
	var payload client.NewVenue
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.NewVenue(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *NewVenueCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the NewAIVenueCommand command.
func (cmd *NewAIVenueCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/venue/%v/%v", cmd.VenueID, url.QueryEscape(cmd.AiType))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.NewAIVenue(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *NewAIVenueCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var aiType string
	cc.Flags().StringVar(&cmd.AiType, "aiType", aiType, `Type of AI to Create`)
	var venueID int
	cc.Flags().IntVar(&cmd.VenueID, "venueID", venueID, `Venue ID`)
}

// Run makes the HTTP request corresponding to the ShowVenueCommand command.
func (cmd *ShowVenueCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/venue/%v", cmd.VenueID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowVenue(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowVenueCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var venueID int
	cc.Flags().IntVar(&cmd.VenueID, "venueID", venueID, `Venue ID`)
}

// Run makes the HTTP request corresponding to the UpvoteAIVenueCommand command.
func (cmd *UpvoteAIVenueCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/venue/%v/%v/upvote", cmd.VenueID, url.QueryEscape(cmd.AiType))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpvoteAIVenue(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpvoteAIVenueCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var aiType string
	cc.Flags().StringVar(&cmd.AiType, "aiType", aiType, `Type of AI`)
	var venueID int
	cc.Flags().IntVar(&cmd.VenueID, "venueID", venueID, `Venue ID`)
}
