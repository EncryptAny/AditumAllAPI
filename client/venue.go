// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/EncryptAny/AditumAllAPI/design
// --out=$(GOPATH)/src/github.com/EncryptAny/AditumAllAPI
// --version=v1.1.0-dirty
//
// API "aditum-all": venue Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// AllVenuePath computes a request path to the all action of venue.
func AllVenuePath() string {

	return fmt.Sprintf("/venue")
}

// Get all venues
func (c *Client) AllVenue(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAllVenueRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAllVenueRequest create the request corresponding to the all action endpoint of the venue resource.
func (c *Client) NewAllVenueRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DownvoteAIVenuePath computes a request path to the downvoteAI action of venue.
func DownvoteAIVenuePath(venueID int, aiType string) string {
	param0 := strconv.Itoa(venueID)
	param1 := aiType

	return fmt.Sprintf("/venue/%s/%s/downvote", param0, param1)
}

// Downvote an existing AI for a venue
func (c *Client) DownvoteAIVenue(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDownvoteAIVenueRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDownvoteAIVenueRequest create the request corresponding to the downvoteAI action endpoint of the venue resource.
func (c *Client) NewDownvoteAIVenueRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// NewVenuePath computes a request path to the new action of venue.
func NewVenuePath() string {

	return fmt.Sprintf("/venue")
}

// Create a new venue
func (c *Client) NewVenue(ctx context.Context, path string, payload *NewVenue, contentType string) (*http.Response, error) {
	req, err := c.NewNewVenueRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewNewVenueRequest create the request corresponding to the new action endpoint of the venue resource.
func (c *Client) NewNewVenueRequest(ctx context.Context, path string, payload *NewVenue, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// NewAIVenuePath computes a request path to the newAI action of venue.
func NewAIVenuePath(venueID int, aiType string) string {
	param0 := strconv.Itoa(venueID)
	param1 := aiType

	return fmt.Sprintf("/venue/%s/%s", param0, param1)
}

// Create a new AI for a venue
func (c *Client) NewAIVenue(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewNewAIVenueRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewNewAIVenueRequest create the request corresponding to the newAI action endpoint of the venue resource.
func (c *Client) NewNewAIVenueRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowVenuePath computes a request path to the show action of venue.
func ShowVenuePath(venueID int) string {
	param0 := strconv.Itoa(venueID)

	return fmt.Sprintf("/venue/%s", param0)
}

// Get venue by ID
func (c *Client) ShowVenue(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowVenueRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowVenueRequest create the request corresponding to the show action endpoint of the venue resource.
func (c *Client) NewShowVenueRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpvoteAIVenuePath computes a request path to the upvoteAI action of venue.
func UpvoteAIVenuePath(venueID int, aiType string) string {
	param0 := strconv.Itoa(venueID)
	param1 := aiType

	return fmt.Sprintf("/venue/%s/%s/upvote", param0, param1)
}

// Upvote an existing AI for a venue
func (c *Client) UpvoteAIVenue(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUpvoteAIVenueRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpvoteAIVenueRequest create the request corresponding to the upvoteAI action endpoint of the venue resource.
func (c *Client) NewUpvoteAIVenueRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
