// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/EncryptAny/AditumAllAPI/design
// --out=$(GOPATH)/src/github.com/EncryptAny/AditumAllAPI
// --version=v1.1.0-dirty
//
// API "aditum-all": Application Media Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import "github.com/goadesign/goa"

// Describes an Accessiblity Point in full (default view)
//
// Identifier: ap; view=default
type Ap struct {
	// Number of Downvotes for given AP
	Downvotes *int `form:"downvotes,omitempty" json:"downvotes,omitempty" xml:"downvotes,omitempty"`
	// Unique AP ID
	ID int `form:"id" json:"id" xml:"id"`
	// Latitude of given AP
	Lat float64 `form:"lat" json:"lat" xml:"lat"`
	// Longitude of given AP
	Long float64 `form:"long" json:"long" xml:"long"`
	// Type of Accessiblity Point
	Type string `form:"type" json:"type" xml:"type"`
	// Number of Upvotes for given AP
	Upvotes *int `form:"upvotes,omitempty" json:"upvotes,omitempty" xml:"upvotes,omitempty"`
	// Associated Venue
	VenueID *int `form:"venueID,omitempty" json:"venueID,omitempty" xml:"venueID,omitempty"`
}

// Validate validates the Ap media type instance.
func (mt *Ap) Validate() (err error) {

	if mt.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "type"))
	}

	if !(mt.Type == "parking" || mt.Type == "door" || mt.Type == "ramp") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.type`, mt.Type, []interface{}{"parking", "door", "ramp"}))
	}
	return
}

// Describes an Accessiblity Point in full (venue view)
//
// Identifier: ap; view=venue
type ApVenue struct {
	// Number of Downvotes for given AP
	Downvotes *int `form:"downvotes,omitempty" json:"downvotes,omitempty" xml:"downvotes,omitempty"`
	// Unique AP ID
	ID int `form:"id" json:"id" xml:"id"`
	// Latitude of given AP
	Lat float64 `form:"lat" json:"lat" xml:"lat"`
	// Longitude of given AP
	Long float64 `form:"long" json:"long" xml:"long"`
	// Type of Accessiblity Point
	Type string `form:"type" json:"type" xml:"type"`
	// Number of Upvotes for given AP
	Upvotes *int `form:"upvotes,omitempty" json:"upvotes,omitempty" xml:"upvotes,omitempty"`
}

// Validate validates the ApVenue media type instance.
func (mt *ApVenue) Validate() (err error) {

	if mt.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "type"))
	}

	if !(mt.Type == "parking" || mt.Type == "door" || mt.Type == "ramp") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.type`, mt.Type, []interface{}{"parking", "door", "ramp"}))
	}
	return
}

// Fully describes a venue (default view)
//
// Identifier: venue; view=default
type Venue struct {
	// Unique Venue ID
	ID int `form:"id" json:"id" xml:"id"`
	// Latitude of Venue
	Lat *float64 `form:"lat,omitempty" json:"lat,omitempty" xml:"lat,omitempty"`
	// Longitude of Venue
	Long *float64 `form:"long,omitempty" json:"long,omitempty" xml:"long,omitempty"`
	// Name of Venue
	Name string `form:"name" json:"name" xml:"name"`
	// Distance in meters for the notification distance
	Radius *int `form:"radius,omitempty" json:"radius,omitempty" xml:"radius,omitempty"`
}

// Validate validates the Venue media type instance.
func (mt *Venue) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// Fully describes a venue (detailed view)
//
// Identifier: venue; view=detailed
type VenueDetailed struct {
	// Exists if venue is reported to contain an Automatic Electronic Defibulator (AED).
	Aed *Ai `form:"aed,omitempty" json:"aed,omitempty" xml:"aed,omitempty"`
	// Accessibility Points of the given location.
	Aps []*Ap `form:"aps,omitempty" json:"aps,omitempty" xml:"aps,omitempty"`
	// Is filled in if venue is reported to have epi-pens on premisis
	EpiPen *Ai `form:"epiPen,omitempty" json:"epiPen,omitempty" xml:"epiPen,omitempty"`
	// Unique Venue ID
	ID int `form:"id" json:"id" xml:"id"`
	// Latitude of Venue
	Lat *float64 `form:"lat,omitempty" json:"lat,omitempty" xml:"lat,omitempty"`
	// Longitude of Venue
	Long *float64 `form:"long,omitempty" json:"long,omitempty" xml:"long,omitempty"`
	// Name of Venue
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the VenueDetailed media type instance.
func (mt *VenueDetailed) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	for _, e := range mt.Aps {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
